
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    match /users/{userId} {
      // Authenticated users can read their own document.
      // Users with an 'admin: true' custom claim can read any user document.
      allow read: if request.auth != null &&
                    (request.auth.uid == userId || request.auth.token.admin == true);

      // Authenticated users can create or update their own document.
      // Note: If admins need to modify other users' documents from the client,
      // this rule would need to be expanded (e.g., add request.auth.token.admin == true).
      // However, it's generally more secure to handle such admin modifications
      // via trusted backend functions.
      allow write: if request.auth != null && request.auth.uid == userId;

      // Deletion of user documents should typically be handled by backend processes
      // or with very strict rules.
      // allow delete: if false; // Example: disallow client-side deletion
    }

    // Example rules for an 'adminData' collection, accessible only by admins
    match /adminData/{docId} {
      allow read, write, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // Placeholder for 'scans' collection rules
    // match /scans/{scanId} {
      // Example: Admins can manage all scans
      // allow read, write, delete: if request.auth != null && request.auth.token.admin == true;
      // Example: Users can create their own scans
      // allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Example: Users can read their own scans (if you store userId on the scan document)
      // allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    // }

    // Add rules for other collections (e.g., rewards, settings) as your application grows.
    // Always consider who should have read, write, create, update, and delete permissions.
  }
}
